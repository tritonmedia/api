// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tritonmedia/api/internal/ent/media"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// SourceURI holds the value of the "source_uri" field.
	SourceURI string `json:"source_uri,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// StatusPercent holds the value of the "status_percent" field.
	StatusPercent float32 `json:"status_percent,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},       // id
		&sql.NullString{},  // title
		&sql.NullString{},  // type
		&sql.NullString{},  // source
		&sql.NullString{},  // source_uri
		&sql.NullString{},  // status
		&sql.NullFloat64{}, // status_percent
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(values ...interface{}) error {
	if m, n := len(values), len(media.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		m.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[0])
	} else if value.Valid {
		m.Title = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[1])
	} else if value.Valid {
		m.Type = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field source", values[2])
	} else if value.Valid {
		m.Source = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field source_uri", values[3])
	} else if value.Valid {
		m.SourceURI = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[4])
	} else if value.Valid {
		m.Status = value.String
	}
	if value, ok := values[5].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field status_percent", values[5])
	} else if value.Valid {
		m.StatusPercent = float32(value.Float64)
	}
	return nil
}

// Update returns a builder for updating this Media.
// Note that, you need to call Media.Unwrap() before calling this method, if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return (&MediaClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", title=")
	builder.WriteString(m.Title)
	builder.WriteString(", type=")
	builder.WriteString(m.Type)
	builder.WriteString(", source=")
	builder.WriteString(m.Source)
	builder.WriteString(", source_uri=")
	builder.WriteString(m.SourceURI)
	builder.WriteString(", status=")
	builder.WriteString(m.Status)
	builder.WriteString(", status_percent=")
	builder.WriteString(fmt.Sprintf("%v", m.StatusPercent))
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media

func (m MediaSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
