// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*Media, error)
	CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*Media, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

var aPIGetMediaStreamDesc = &grpc.StreamDesc{
	StreamName: "GetMedia",
}

func (c *aPIClient) GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*Media, error) {
	out := new(Media)
	err := c.cc.Invoke(ctx, "/api.v1.API/GetMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var aPICreateMediaStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateMedia",
}

func (c *aPIClient) CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*Media, error) {
	out := new(Media)
	err := c.cc.Invoke(ctx, "/api.v1.API/CreateMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIService is the service API for API service.
// Fields should be assigned to their respective handler implementations only before
// RegisterAPIService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type APIService struct {
	GetMedia    func(context.Context, *GetMediaRequest) (*Media, error)
	CreateMedia func(context.Context, *CreateMediaRequest) (*Media, error)
}

func (s *APIService) getMedia(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/api.v1.API/GetMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetMedia(ctx, req.(*GetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *APIService) createMedia(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/api.v1.API/CreateMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateMedia(ctx, req.(*CreateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterAPIService registers a service implementation with a gRPC server.
func RegisterAPIService(s grpc.ServiceRegistrar, srv *APIService) {
	srvCopy := *srv
	if srvCopy.GetMedia == nil {
		srvCopy.GetMedia = func(context.Context, *GetMediaRequest) (*Media, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
		}
	}
	if srvCopy.CreateMedia == nil {
		srvCopy.CreateMedia = func(context.Context, *CreateMediaRequest) (*Media, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateMedia not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "api.v1.API",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetMedia",
				Handler:    srvCopy.getMedia,
			},
			{
				MethodName: "CreateMedia",
				Handler:    srvCopy.createMedia,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "v1.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewAPIService creates a new APIService containing the
// implemented methods of the API service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewAPIService(s interface{}) *APIService {
	ns := &APIService{}
	if h, ok := s.(interface {
		GetMedia(context.Context, *GetMediaRequest) (*Media, error)
	}); ok {
		ns.GetMedia = h.GetMedia
	}
	if h, ok := s.(interface {
		CreateMedia(context.Context, *CreateMediaRequest) (*Media, error)
	}); ok {
		ns.CreateMedia = h.CreateMedia
	}
	return ns
}

// UnstableAPIService is the service API for API service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableAPIService interface {
	GetMedia(context.Context, *GetMediaRequest) (*Media, error)
	CreateMedia(context.Context, *CreateMediaRequest) (*Media, error)
}
